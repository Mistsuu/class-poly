#ifndef _BIGX1_INCLUDE_
#define _BIGX1_INCLUDE_

/*
    Copyright 2012 Andrew V. Sutherland

    This file is part of classpoly.

    classpoly is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 2 of the License, or
    (at your option) any later version.

    classpoly is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with classpoly.  If not, see <http://www.gnu.org/licenses/>.
*/

#define BIGX1_MAX_YDEG	15

/*
X27:=y^8 + (3*x^2 + 6*x - 3)*y^7 - (3*x^5 - 18*x^3 - 9*x^2 + 18*x - 3)*y^6 - (x^8 + 8*x^7 + 13*x^6 - 21*x^5 - 48*x^4 + 20*x^3 + 42*x^2 - 18*x + 1)*y^5
		- (x^10 + 6*x^9 + 12*x^8 - 14*x^7 - 72*x^6 - 27*x^5 + 93*x^4 + 33*x^3 - 45*x^2 + 6*x)*y^4 + (x^10 + 11*x^9 + 40*x^8 + 36*x^7 - 69*x^6 - 105*x^5 + 33*x^4 + 54*x^3 - 15*x^2)*y^3
		- (4*x^9 + 30*x^8 + 63*x^7 + 10*x^6 - 69*x^5 - 24*x^4 + 19*x^3)*y^2 + (6*x^8 + 27*x^7 + 27*x^6 - 6*x^5 - 12*x^4)*y - 3*x^7 - 6*x^6 - 3*x^5;
*/
#define X27_YDEG		8
#define X27_XDEG		10
ff_t X27_p;
ff_t X27_ff_c[X27_YDEG][X27_XDEG+1];
int X27_min_x[X27_YDEG] = { 5, 4, 3, 2, 1, 0, 0, 0 };
int X27_len_x[X27_YDEG] = {3, 5, 7, 9, 10, 9, 6, 3 };
int X27_c[X27_YDEG][X27_XDEG+1] = {
	{ 0, 0, 0, 0, 0, -3, -6, -3, 0, 0, 0 },
	{ 0, 0, 0, 0, -12, -6, 27, 27, 6, 0, 0 },
	{ 0, 0, 0, -19, 24, 69, -10, -63, -30, -4, 0 },
	{ 0, 0, -15, 54, 33, -105, -69, 36, 40, 11, 1 },
	{ 0, -6, 45, -33, -93, 27, 72, 14, -12, -6, -1 },
	{ -1, 18, -42, -20, 48, 21, -13, -8, -1, 0, 0 },
	{ 3, -18, 9, 18, 0, -3, 0, 0, 0, 0, 0 },
	{ -3, 6, 3, 0, 0, 0, 0, 0, 0, 0, 0 },
};
static inline int X27_eval(ff_t f[], ff_t x)
{
	ff_t xpow[X27_XDEG+1];
	register int i, j;
	
	if ( X27_p != _ff_p ) 	{ for ( i = 0 ; i < X27_YDEG ; i++ ) for ( j = X27_min_x[i] ; j < X27_min_x[i]+X27_len_x[i] ; j++ ) _ff_set_i (X27_ff_c[i][j], X27_c[i][j]);  X27_p = _ff_p; }
	// puts powers of x in reverse order for sum mults, i.e xpow[i] = x^(n-i) where n = X27_XDEG
	_ff_set_one(xpow[X27_XDEG]); _ff_set(xpow[X27_XDEG-1],x);
	for ( i = X27_XDEG-2 ; i >= 0 ; i-- ) _ff_mult(xpow[i],xpow[i+1],x);
	for ( i = 0 ; i < X27_YDEG ; i++ ) _ff_sum_mults(f[i],X27_ff_c[i]+X27_min_x[i],xpow+X27_XDEG-X27_min_x[i]-X27_len_x[i]+1,X27_len_x[i]);
	_ff_set_one(f[X27_YDEG]);
	return X27_YDEG;
}

/*
X28:=y^7 + 3*x*y^6 + (x^5 + 3*x^4 + 5*x^3 + 9*x^2 + 2*x)*y^5 - (2*x^5 - 6*x^3 + 2*x^2 + 2*x)*y^4 + (3*x^6 + 16*x^5 + 18*x^4 - 2*x^2)*y^3 + (x^7 - 2*x^6 - 20*x^5 - 28*x^4 - 12*x^3 - 2*x^2)*y^2
		 - (2*x^7 + 3*x^6 - 5*x^5 - 10*x^4 - 5*x^3 - x^2)*y + x^7 + 2*x^6 + x^5;
*/
#define X28_YDEG		7
#define X28_XDEG		7
ff_t X28_p;
ff_t X28_ff_c[X28_YDEG][X28_XDEG+1];
int X28_min_x[X28_YDEG] = { 5, 2, 2, 2, 1, 1, 1 };
int X28_len_x[X28_YDEG] = {3, 6, 6, 5, 5, 5, 1 };
int X28_c[X28_YDEG][X28_XDEG+1] = {
	{ 0, 0, 0, 0, 0, 1, 2, 1 },
	{ 0, 0, 1, 5, 10, 5, -3, -2 },
	{ 0, 0, -2, -12, -28, -20, -2, 1 },
	{ 0, 0, -2, 0, 18, 16, 3, 0 },
	{ 0, -2, -2, 6, 0, -2, 0, 0 },
	{ 0, 2, 9, 5, 3, 1, 0, 0 },
	{ 0, 3, 0, 0, 0, 0, 0, 0 },
};
static inline int X28_eval(ff_t f[], ff_t x)
{
	ff_t xpow[X28_XDEG+1];
	register int i, j;
	
	if ( X28_p != _ff_p ) 	{ for ( i = 0 ; i < X28_YDEG ; i++ ) for ( j = X28_min_x[i] ; j < X28_min_x[i]+X28_len_x[i] ; j++ ) _ff_set_i (X28_ff_c[i][j], X28_c[i][j]);  X28_p = _ff_p; }
	// puts powers of x in reverse order for sum mults, i.e xpow[i] = x^(n-i) where n = X28_XDEG
	_ff_set_one(xpow[X28_XDEG]); _ff_set(xpow[X28_XDEG-1],x);
	for ( i = X28_XDEG-2 ; i >= 0 ; i-- ) _ff_mult(xpow[i],xpow[i+1],x);
	for ( i = 0 ; i < X28_YDEG ; i++ ) _ff_sum_mults(f[i],X28_ff_c[i]+X28_min_x[i],xpow+X28_XDEG-X28_min_x[i]-X28_len_x[i]+1,X28_len_x[i]);
	_ff_set_one(f[X28_YDEG]);
	return X28_YDEG;
}

/*
X29:=y^11 + (2*x^3 + 5*x^2 + 5*x - 3)*y^10 + (x^6 + 8*x^5 + 18*x^4 + 11*x^3 - 5*x^2 - 12*x + 3)*y^9
                   + (3*x^8 + 15*x^7 + 29*x^6 + 6*x^5 - 39*x^4 - 19*x^3 + 5*x^2 + 5*x - 1)*y^8
		   + (3*x^10 + 14*x^9 + 18*x^8 - 26*x^7 - 99*x^6 - 45*x^5 + 95*x^4 + 25*x^3 - 37*x^2 + 7*x)*y^7
		   + (x^12 + 5*x^11 - 44*x^9 - 106*x^8 - 40*x^7 + 197*x^6 + 190*x^5 - 140*x^4 - 93*x^3 + 59*x^2 - 6*x)*y^6
		    - (2*x^12 + 16*x^11 + 37*x^10 - 9*x^9 - 184*x^8 - 256*x^7 + 99*x^6 + 346*x^5 - 20*x^4 - 130*x^3 + 32*x^2 - x)*y^5
		   + (x^12 + 15*x^11 + 65*x^10 + 99*x^9 - 55*x^8 - 320*x^7 - 165*x^6 + 223*x^5 + 100*x^4 - 66*x^3 + 5*x^2)*y^4
		    - (4*x^11 + 36*x^10 + 108*x^9 + 98*x^8 - 110*x^7 - 191*x^6 + 15*x^5 + 64*x^4 - 10*x^3)*y^3
		   + (6*x^10 + 38*x^9 + 76*x^8 + 25*x^7 - 55*x^6 - 26*x^5 + 10*x^4)*y^2
                    - (4*x^9 + 17*x^8 + 18*x^7 - 5*x^5)*y + x^8 + 2*x^7 + x^6;
*/
#define X29_YDEG		11
#define X29_XDEG		12
ff_t X29_p;
ff_t X29_ff_c[X29_YDEG][X29_XDEG+1];
int X29_min_x[X29_YDEG] = { 6, 5, 4, 3, 2, 1, 1, 1, 0, 0, 0 };
int X29_len_x[X29_YDEG] = {3, 5, 7, 9, 11, 12, 12, 10, 9, 7, 4 };
int X29_c[X29_YDEG][X29_XDEG+1] = {
	{ 0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 5, 0, -18, -17, -4, 0, 0, 0 },
	{ 0, 0, 0, 0, 10, -26, -55, 25, 76, 38, 6, 0, 0 },
	{ 0, 0, 0, 10, -64, -15, 191, 110, -98, -108, -36, -4, 0 },
	{ 0, 0, 5, -66, 100, 223, -165, -320, -55, 99, 65, 15, 1 },
	{ 0, 1, -32, 130, 20, -346, -99, 256, 184, 9, -37, -16, -2 },
	{ 0, -6, 59, -93, -140, 190, 197, -40, -106, -44, 0, 5, 1 },
	{ 0, 7, -37, 25, 95, -45, -99, -26, 18, 14, 3, 0, 0 },
	{ -1, 5, 5, -19, -39, 6, 29, 15, 3, 0, 0, 0, 0 },
	{ 3, -12, -5, 11, 18, 8, 1, 0, 0, 0, 0, 0, 0 },
	{ -3, 5, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
};
static inline int X29_eval(ff_t f[], ff_t x)
{
	ff_t xpow[X29_XDEG+1];
	register int i, j;
	
	if ( X29_p != _ff_p ) 	{ for ( i = 0 ; i < X29_YDEG ; i++ ) for ( j = X29_min_x[i] ; j < X29_min_x[i]+X29_len_x[i] ; j++ ) _ff_set_i (X29_ff_c[i][j], X29_c[i][j]);  X29_p = _ff_p; }
	// puts powers of x in reverse order for sum mults, i.e xpow[i] = x^(n-i) where n = X29_XDEG
	_ff_set_one(xpow[X29_XDEG]); _ff_set(xpow[X29_XDEG-1],x);
	for ( i = X29_XDEG-2 ; i >= 0 ; i-- ) _ff_mult(xpow[i],xpow[i+1],x);
	for ( i = 0 ; i < X29_YDEG ; i++ ) _ff_sum_mults(f[i],X29_ff_c[i]+X29_min_x[i],xpow+X29_XDEG-X29_min_x[i]-X29_len_x[i]+1,X29_len_x[i]);
	_ff_set_one(f[X29_YDEG]);
	return X29_YDEG;
}


/*
X30:=y^8 - (2*x^3 + 4*x^2 + x + 5)*y^7 + (x^6 + 4*x^5 + 6*x^4 + 9*x^3 + 14*x^2 + 10)*y^6 - (x^7 + 4*x^6 + 9*x^5 + 10*x^4 + 4*x^3 + 15*x^2 - 10*x + 10)*y^5
		+ (x^8 + 4*x^7 + 4*x^6 - 5*x^4 - 20*x^3 + 5*x^2 - 20*x + 5)*y^4 + (3*x^7 + 11*x^6 + 15*x^5 + 9*x^4 + 18*x^3 - 9*x^2 + 14*x - 1)*y^3
		+ (3*x^6 + 9*x^5 + 14*x^4 + 2*x^3 + 13*x^2 - 3*x)*y^2 + (x^5 + x^4 + 4*x^3 - 3*x^2)*y - x^3;
*/
#define X30_YDEG		8
#define X30_XDEG		8
ff_t X30_p;
ff_t X30_ff_c[X30_YDEG][X30_XDEG+1];
int X30_min_x[X30_YDEG] = { 3, 2, 1, 0, 0, 0, 0, 0 };
int X30_len_x[X30_YDEG] = {1, 4, 6, 8, 9, 8, 7, 4 };
int X30_c[X30_YDEG][X30_XDEG+1] = {
	{ 0, 0, 0, -1, 0, 0, 0, 0, 0 },
	{ 0, 0, -3, 4, 1, 1, 0, 0, 0 },
	{ 0, -3, 13, 2, 14, 9, 3, 0, 0 },
	{ -1, 14, -9, 18, 9, 15, 11, 3, 0 },
	{ 5, -20, 5, -20, -5, 0, 4, 4, 1 },
	{ -10, 10, -15, -4, -10, -9, -4, -1, 0 },
	{ 10, 0, 14, 9, 6, 4, 1, 0, 0 },
	{ -5, -1, -4, -2, 0, 0, 0, 0, 0 },
};
static inline int X30_eval(ff_t f[], ff_t x)
{
	ff_t xpow[X30_XDEG+1];
	register int i, j;
	
	if ( X30_p != _ff_p ) 	{ for ( i = 0 ; i < X30_YDEG ; i++ ) for ( j = X30_min_x[i] ; j < X30_min_x[i]+X30_len_x[i] ; j++ ) _ff_set_i (X30_ff_c[i][j], X30_c[i][j]);  X30_p = _ff_p; }
	// puts powers of x in reverse order for sum mults, i.e xpow[i] = x^(n-i) where n = X30_XDEG
	_ff_set_one(xpow[X30_XDEG]); _ff_set(xpow[X30_XDEG-1],x);
	for ( i = X30_XDEG-2 ; i >= 0 ; i-- ) _ff_mult(xpow[i],xpow[i+1],x);
	for ( i = 0 ; i < X30_YDEG ; i++ ) _ff_sum_mults(f[i],X30_ff_c[i]+X30_min_x[i],xpow+X30_XDEG-X30_min_x[i]-X30_len_x[i]+1,X30_len_x[i]);
	_ff_set_one(f[X30_YDEG]);
	return X30_YDEG;
}

/*
X31:=y^13 + (x^3 + 7*x^2 + 10*x - 6)*y^12 + (6*x^5 + 30*x^4 + 51*x^3 + 3*x^2 - 54*x + 15)*y^11 + (15*x^7 + 73*x^6 + 132*x^5 + 42*x^4 - 175*x^3 - 119*x^2 + 124*x - 20)*y^10
		   + (15*x^9 + 95*x^8 + 193*x^7 + 66*x^6 - 334*x^5 - 439*x^4 + 143*x^3 + 335*x^2 - 155*x + 15)*y^9
                    - (x^12 - 2*x^11 - 54*x^10 - 156*x^9 - 39*x^8 + 453*x^7 + 693*x^6 - 9*x^5 - 828*x^4 - 201*x^3 + 447*x^2 - 111*x + 6)*y^8
		   - (x^14 + 4*x^13 - 9*x^12 - 66*x^11 - 21*x^10 + 368*x^9 + 649*x^8 - 8*x^7 - 1061*x^6 - 812*x^5 + 619*x^4 + 529*x^3 - 329*x^2 + 43*x - 1)*y^7
		   + (3*x^14 + 19*x^13 + 16*x^12 - 142*x^11 - 344*x^10 + 51*x^9 + 951*x^8 + 935*x^7 - 429*x^6 - 1157*x^5 + 5*x^4 + 480*x^3 - 129*x^2 + 7*x)*y^6
		    - (3*x^14 + 30*x^13 + 83*x^12 - 31*x^11 - 471*x^10 - 582*x^9 + 291*x^8 + 1122*x^7 + 477*x^6 - 642*x^5 - 303*x^4 + 207*x^3 - 21*x^2)*y^5
		   + (x^14 + 19*x^13 + 96*x^12 + 146*x^11 - 142*x^10 - 611*x^9 - 435*x^8 + 390*x^7 + 584*x^6 - 50*x^5 - 185*x^4 + 35*x^3)*y^4
		   - (4*x^13 + 42*x^12 + 136*x^11 + 125*x^10 - 157*x^9 - 377*x^8 - 119*x^7 + 189*x^6 + 81*x^5 - 35*x^4)*y^3
		   + (6*x^12 + 42*x^11 + 93*x^10 + 54*x^9 - 75*x^8 - 96*x^7 - 3*x^6 + 21*x^5)*y^2
		   - (4*x^11 + 19*x^10 + 29*x^9 + 10*x^8 - 11*x^7 - 7*x^6)*y + x^7*(x+1)^3;
*/
#define X31_YDEG		13
#define X31_XDEG		14
ff_t X31_p;
ff_t X31_ff_c[X31_YDEG][X31_XDEG+1];
int X31_min_x[X31_YDEG] = { 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0 };
int X31_len_x[X31_YDEG] = { 4, 6, 8, 10, 12, 13, 14, 15, 13, 10, 8, 6, 4 };
int X31_c[X31_YDEG][X31_XDEG+1] = {
	{ 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 1, 0, 0, 0, 0},
	{ 0, 0, 0, 0, 0, 0, 7, 11, -10, -29, -19, -4, 0, 0, 0},
	{ 0, 0, 0, 0, 0, 21, -3, -96, -75, 54, 93, 42, 6, 0, 0},
	{ 0, 0, 0, 0, 35, -81, -189, 119, 377, 157, -125, -136, -42, -4, 0},
	{ 0, 0, 0, 35, -185, -50, 584, 390, -435, -611, -142, 146, 96, 19, 1},
	{ 0, 0, 21, -207, 303, 642, -477, -1122, -291, 582, 471, 31, -83, -30, -3},
	{ 0, 7, -129, 480, 5, -1157, -429, 935, 951, 51, -344, -142, 16, 19, 3},
	{ 1, -43, 329, -529, -619, 812, 1061, 8, -649, -368, 21, 66, 9, -4, -1},
	{ -6, 111, -447, 201, 828, 9, -693, -453, 39, 156, 54, 2, -1, 0, 0},
	{ 15, -155, 335, 143, -439, -334, 66, 193, 95, 15, 0, 0, 0, 0, 0},
	{ -20, 124, -119, -175, 42, 132, 73, 15, 0, 0, 0, 0, 0, 0, 0},
	{ 15, -54, 3, 51, 30, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{ -6, 10, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
};
static inline int X31_eval(ff_t f[], ff_t x)
{
	ff_t xpow[X31_XDEG+1];
	register int i, j;
	
	if ( X31_p != _ff_p ) 	{ for ( i = 0 ; i < X31_YDEG ; i++ ) for ( j = X31_min_x[i] ; j < X31_min_x[i]+X31_len_x[i] ; j++ ) _ff_set_i (X31_ff_c[i][j], X31_c[i][j]);  X31_p = _ff_p; }
	// puts powers of x in reverse order for sum mults, i.e xpow[i] = x^(n-i) where n = X31_XDEG
	_ff_set_one(xpow[X31_XDEG]); _ff_set(xpow[X31_XDEG-1],x);
	for ( i = X31_XDEG-2 ; i >= 0 ; i-- ) _ff_mult(xpow[i],xpow[i+1],x);
	for ( i = 0 ; i < X31_YDEG ; i++ ) _ff_sum_mults(f[i],X31_ff_c[i]+X31_min_x[i],xpow+X31_XDEG-X31_min_x[i]-X31_len_x[i]+1,X31_len_x[i]);
	_ff_set_one(f[X31_YDEG]);
	return X31_YDEG;
}


/*
X32:=y^10 + (x^3 + 5*x^2 + 5*x - 5)*y^9 + (4*x^5 + 15*x^4 + 15*x^3 - 16*x^2 - 25*x + 10)*y^8 + (6*x^7 + 26*x^6 + 23*x^5 - 45*x^4 - 88*x^3 + 50*x - 10)*y^7
		   + (4*x^9 + 23*x^8 + 26*x^7 - 70*x^6 - 165*x^5 - 33*x^4 + 150*x^3 + 55*x^2 - 50*x + 5)*y^6
		   + (x^11 + 9*x^10 + 15*x^9 - 47*x^8 - 161*x^7 - 65*x^6 + 226*x^5 + 202*x^4 - 83*x^3 - 81*x^2 + 25*x - 1)*y^5
		   - (x^11 + 17*x^10 + 63*x^9 + 40*x^8 - 165*x^7 - 253*x^6 + 36*x^5 + 205*x^4 + 23*x^3 - 47*x^2 + 5*x)*y^4 
                   + (8*x^10 + 56*x^9 + 108*x^8 - 2*x^7 - 182*x^6 - 104*x^5 + 64*x^4 + 38*x^3 - 10*x^2)*y^3
		   - (x^10 + 18*x^9 + 63*x^8 + 60*x^7 - 29*x^6 - 60*x^5 - 7*x^4 + 10*x^3)*y^2 
		   + (2*x^9 + 14*x^8 + 25*x^7 + 11*x^6 - 7*x^5 - 5*x^4)*y - x^5*(x+1)^3;
*/
#define X32_YDEG		10
#define X32_XDEG		11
ff_t X32_p;
ff_t X32_ff_c[X32_YDEG][X32_XDEG+1];
int X32_min_x[X32_YDEG] = { 5, 4, 3, 2, 1, 0, 0, 0, 0, 0 };
int X32_len_x[X32_YDEG] = { 4, 6, 8, 9, 11, 12, 10, 8, 6, 4 };
int X32_c[X32_YDEG][X32_XDEG+1] = {
	{ 0, 0, 0, 0, 0, -1, -3, -3, -1, 0, 0, 0 },
	{ 0, 0, 0, 0, -5, -7, 11, 25, 14, 2, 0, 0 },
	{ 0, 0, 0, -10, 7, 60, 29, -60, -63, -18, -1, 0 },
	{ 0, 0, -10, 38, 64, -104, -182, -2, 108, 56, 8, 0 },
	{ 0, -5, 47, -23, -205, -36, 253, 165, -40, -63, -17, -1 },
	{ -1, 25, -81, -83, 202, 226, -65, -161, -47, 15, 9, 1 },
	{ 5, -50, 55, 150, -33, -165, -70, 26, 23, 4, 0, 0 },
	{ -10, 50, 0, -88, -45, 23, 26, 6, 0, 0, 0, 0 },
	{ 10, -25, -16, 15, 15, 4, 0, 0, 0, 0, 0, 0 },
	{ -5, 5, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
};
static inline int X32_eval(ff_t f[], ff_t x)
{
	ff_t xpow[X32_XDEG+1];
	register int i, j;
	
	if ( X32_p != _ff_p ) 	{ for ( i = 0 ; i < X32_YDEG ; i++ ) for ( j = X32_min_x[i] ; j < X32_min_x[i]+X32_len_x[i] ; j++ ) _ff_set_i (X32_ff_c[i][j], X32_c[i][j]);  X32_p = _ff_p; }
	// puts powers of x in reverse order for sum mults, i.e xpow[i] = x^(n-i) where n = X32_XDEG
	_ff_set_one(xpow[X32_XDEG]); _ff_set(xpow[X32_XDEG-1],x);
	for ( i = X32_XDEG-2 ; i >= 0 ; i-- ) _ff_mult(xpow[i],xpow[i+1],x);
	for ( i = 0 ; i < X32_YDEG ; i++ ) _ff_sum_mults(f[i],X32_ff_c[i]+X32_min_x[i],xpow+X32_XDEG-X32_min_x[i]-X32_len_x[i]+1,X32_len_x[i]);
	_ff_set_one(f[X32_YDEG]);
	return X32_YDEG;
}

/*
X33:=y^12 + (3*x^3 - 8*x^2 - 7*x - 7)*y^11 + (3*x^6 - 15*x^5 + 7*x^4 + 23*x^3 + 75*x^2 + 43*x + 21)*y^10
                   + (x^9 - 10*x^8 + 14*x^7 + 14*x^6 + 38*x^5 - 152*x^4 - 228*x^3 - 268*x^2 - 111*x - 35)*y^9
		   - (2*x^11 - 8*x^10 - 6*x^9 - 12*x^8 + 110*x^7 + 2*x^6 - 189*x^5 - 696*x^4 - 677*x^3 - 496*x^2 - 155*x - 35)*y^8
	           + (x^13 - x^12 - 5*x^11 - 33*x^10 + 18*x^9 + 81*x^8 + 202*x^7 - 359*x^6 - 915*x^5 - 1428*x^4 - 1000*x^3 - 525*x^2 - 125*x - 21)*y^7
                   + (4*x^12 + 21*x^11 + 24*x^10 - 134*x^9 - 174*x^8 + 39*x^7 + 1063*x^6 + 1550*x^5 + 1565*x^4 + 817*x^3 + 323*x^2 + 57*x + 7)*y^6
		   - (26*x^11 - 38*x^10 - 215*x^9 - 36*x^8 + 484*x^7 + 1335*x^6 + 1323*x^5 + 957*x^4 + 368*x^3 + 110*x^2 + 13*x + 1)*y^5
		   + (21*x^11 - 74*x^10 - 133*x^9 + 180*x^8 + 570*x^7 + 866*x^6 + 600*x^5 + 317*x^4 + 83*x^3 + 18*x^2 + x)*y^4
                    - (7*x^11 - 52*x^10 - 15*x^9 + 191*x^8 + 297*x^7 + 296*x^6 + 136*x^5 + 51*x^4 + 7*x^3 + x^2)*y^3
		   + (x^11 - 16*x^10 + 19*x^9 + 80*x^8 + 73*x^7 + 49*x^6 + 12*x^5 + 3*x^4)*y^2 + (2*x^10 - 8*x^9 - 15*x^8 - 7*x^7 - 3*x^6)*y + x^9 + x^8;
*/
#define X33_YDEG		12
#define X33_XDEG		13
ff_t X33_p;
ff_t X33_ff_c[X33_YDEG][X33_XDEG+1];
int X33_min_x[X33_YDEG] = { 8, 6, 4, 2, 1, 0, 0, 0, 0, 0, 0, 0 };
int X33_len_x[X33_YDEG] = { 2, 5, 8, 10, 11, 12, 13, 14, 12, 10, 7, 4};
int X33_c[X33_YDEG][X33_XDEG+1] = {
	{ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, -3, -7, -15, -8, 2, 0, 0, 0 },
	{ 0, 0, 0, 0, 3, 12, 49, 73, 80, 19, -16, 1, 0, 0 },
	{ 0, 0, -1, -7, -51, -136, -296, -297, -191, 15, 52, -7, 0, 0 },
	{ 0, 1, 18, 83, 317, 600, 866, 570, 180, -133, -74, 21, 0, 0 },
	{ -1, -13, -110, -368, -957, -1323, -1335, -484, 36, 215, 38, -26, 0, 0 },
	{ 7, 57, 323, 817, 1565, 1550, 1063, 39, -174, -134, 24, 21, 4, 0 },
	{ -21, -125, -525, -1000, -1428, -915, -359, 202, 81, 18, -33, -5, -1, 1 },
	{ 35, 155, 496, 677, 696, 189, -2, -110, 12, 6, 8, -2, 0, 0 },
	{ -35, -111, -268, -228, -152, 38, 14, 14, -10, 1, 0, 0, 0, 0 },
	{ 21, 43, 75, 23, 7, -15, 3, 0, 0, 0, 0, 0, 0, 0 },
	{ -7, -7, -8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
};
static inline int X33_eval(ff_t f[], ff_t x)
{
	ff_t xpow[X33_XDEG+1];
	register int i, j;
	
	if ( X33_p != _ff_p ) 	{ for ( i = 0 ; i < X33_YDEG ; i++ ) for ( j = X33_min_x[i] ; j < X33_min_x[i]+X33_len_x[i] ; j++ ) _ff_set_i (X33_ff_c[i][j], X33_c[i][j]);  X33_p = _ff_p; }
	// puts powers of x in reverse order for sum mults, i.e xpow[i] = x^(n-i) where n = X33_XDEG
	_ff_set_one(xpow[X33_XDEG]); _ff_set(xpow[X33_XDEG-1],x);
	for ( i = X33_XDEG-2 ; i >= 0 ; i-- ) _ff_mult(xpow[i],xpow[i+1],x);
	for ( i = 0 ; i < X33_YDEG ; i++ ) _ff_sum_mults(f[i],X33_ff_c[i]+X33_min_x[i],xpow+X33_XDEG-X33_min_x[i]-X33_len_x[i]+1,X33_len_x[i]);
	_ff_set_one(f[X33_YDEG]);
	return X33_YDEG;
}

/*
X34:=y^11 + (x^3 + 8*x^2 + 6*x - 5)*y^10 + (8*x^5 + 28*x^4 + 34*x^3 - 20*x^2 - 30*x + 10)*y^9
                   + (x^8 + 19*x^7 + 61*x^6 + 63*x^5 - 39*x^4 - 140*x^3 - 15*x^2 + 60*x - 10)*y^8
		   + (2*x^10 + 20*x^9 + 66*x^8 + 54*x^7 - 104*x^6 - 256*x^5 - 130*x^4 + 180*x^3 + 100*x^2 - 60*x + 5)*y^7
                   + (x^12 + 8*x^11 + 26*x^10 + 6*x^9 - 143*x^8 - 279*x^7 - 127*x^6 + 235*x^5 + 339*x^4 - 35*x^3 - 130*x^2 + 30*x - 1)*y^6
		   - (x^12 + 14*x^11 + 71*x^10 + 129*x^9 + x^8 - 271*x^7 - 358*x^6 - 88*x^5 + 253*x^4 + 106*x^3 - 72*x^2 + 6*x)*y^5
                   + (5*x^11 + 50*x^10 + 149*x^9 + 162*x^8 + 11*x^7 - 193*x^6 - 226*x^5 + 21*x^4 + 86*x^3 - 15*x^2)*y^4
		   - (10*x^10 + 52*x^9 + 96*x^8 + 109*x^7 + 36*x^6 - 88*x^5 - 49*x^4 + 20*x^3)*y^3
                   + (2*x^9 + 4*x^8 + 29*x^7 + 48*x^6 + 6*x^5 - 15*x^4)*y^2
                   + (x^9 + 7*x^8 + 6*x^7 - 6*x^6 - 6*x^5)*y - x^8 - 2*x^7 - x^6;
*/
#define X34_YDEG		11
#define X34_XDEG		12
ff_t X34_p;
ff_t X34_ff_c[X34_YDEG][X34_XDEG+1];
int X34_min_x[X34_YDEG] = { 6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0 };
int X34_len_x[X34_YDEG] = { 3, 5, 6, 8, 10, 12, 13, 11, 9, 6, 4 };
int X34_c[X34_YDEG][X34_XDEG+1] = {
	{ 0, 0, 0, 0, 0, 0, -1, -2, -1, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, -6, -6, 6, 7, 1, 0, 0, 0 },
	{ 0, 0, 0, 0, -15, 6, 48, 29, 4, 2, 0, 0, 0 },
	{ 0, 0, 0, -20, 49, 88, -36, -109, -96, -52, -10, 0, 0 },
	{ 0, 0, -15, 86, 21, -226, -193, 11, 162, 149, 50, 5, 0 },
	{ 0, -6, 72, -106, -253, 88, 358, 271, -1, -129, -71, -14, -1 },
	{ -1, 30, -130, -35, 339, 235, -127, -279, -143, 6, 26, 8, 1 },
	{ 5, -60, 100, 180, -130, -256, -104, 54, 66, 20, 2, 0, 0 },
	{ -10, 60, -15, -140, -39, 63, 61, 19, 1, 0, 0, 0, 0 },
	{ 10, -30, -20, 34, 28, 8, 0, 0, 0, 0, 0, 0, 0 },
	{ -5, 6, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
};
static inline int X34_eval(ff_t f[], ff_t x)
{
	ff_t xpow[X34_XDEG+1];
	register int i, j;
	
	if ( X34_p != _ff_p ) 	{ for ( i = 0 ; i < X34_YDEG ; i++ ) for ( j = X34_min_x[i] ; j < X34_min_x[i]+X34_len_x[i] ; j++ ) _ff_set_i (X34_ff_c[i][j], X34_c[i][j]);  X34_p = _ff_p; }
	// puts powers of x in reverse order for sum mults, i.e xpow[i] = x^(n-i) where n = X34_XDEG
	_ff_set_one(xpow[X34_XDEG]); _ff_set(xpow[X34_XDEG-1],x);
	for ( i = X34_XDEG-2 ; i >= 0 ; i-- ) _ff_mult(xpow[i],xpow[i+1],x);
	for ( i = 0 ; i < X34_YDEG ; i++ ) _ff_sum_mults(f[i],X34_ff_c[i]+X34_min_x[i],xpow+X34_XDEG-X34_min_x[i]-X34_len_x[i]+1,X34_len_x[i]);
	_ff_set_one(f[X34_YDEG]);
	return X34_YDEG;
}

/*
Note that this polynomial is not monic

X35:=5*y^15 + (15*x^2 + 10*x + 40)*y^14 + (20*x^4 + 35*x^3 + 90*x^2 + 105*x + 145)*y^13
                      + (15*x^6 + 55*x^5 + 90*x^4 + 280*x^3 + 275*x^2 + 460*x + 315)*y^12
		      + (6*x^8 + 58*x^7 + 27*x^6 + 359*x^5 + 290*x^4 + 880*x^3 + 686*x^2 + 1144*x + 456)*y^11
                      + (x^10 + 39*x^9 - 17*x^8 + 303*x^7 + 85*x^6 + 914*x^5 + 913*x^4 + 1506*x^3 + 1517*x^2 + 1824*x + 461)*y^10
		      + (14*x^11 + 4*x^10 + 78*x^9 + 147*x^8 + 411*x^7 + 534*x^6 + 1401*x^5 + 1876*x^4 + 1764*x^3 + 2576*x^2 + 1975*x + 330)*y^9
		      + (2*x^13 + 18*x^12 - 66*x^11 + 334*x^10 - 515*x^9 + 1270*x^8 - 397*x^7 + 1469*x^6 + 1781*x^5 + 2191*x^4 + 1893*x^3 + 3075*x^2 + 1485*x + 165)*y^8
		      + (8*x^14 - 44*x^13 + 198*x^12 - 522*x^11 + 1308*x^10 - 2007*x^9 + 3233*x^8 - 2017*x^7 + 2464*x^6 + 1865*x^5 + 1489*x^4 + 2065*x^3 + 2520*x^2 + 770*x + 55)*y^7
		      + (x^16 - 7*x^15 + 35*x^14 - 117*x^13 + 362*x^12 - 841*x^11 + 1839*x^10 - 2789*x^9 + 4119*x^8 - 3050*x^7 + 2983*x^6 + 1186*x^5 + 745*x^4 + 1860*x^3 + 1396*x^2 + 264*x + 11)*y^6
		      + (6*x^14 - 36*x^13 + 162*x^12 - 446*x^11 + 1102*x^10 - 1817*x^9 + 2879*x^8 - 2444*x^7 + 2486*x^6 + 254*x^5 + 503*x^4 + 1161*x^3 + 502*x^2 + 54*x + 1)*y^5
		      + (15*x^12 - 67*x^11 + 263*x^10 - 528*x^9 + 1056*x^8 - 1030*x^7 + 1269*x^6 - 114*x^5 + 386*x^4 + 459*x^3 + 106*x^2 + 5*x)*y^4
		      + (x^11 + 16*x^10 - 43*x^9 + 169*x^8 - 182*x^7 + 349*x^6 - 54*x^5 + 191*x^4 + 103*x^3 + 10*x^2)*y^3
                      + (3*x^9 + 6*x^8 + 3*x^7 + 39*x^6 + 10*x^5 + 49*x^4 + 10*x^3)*y^2
                      + (3*x^7 + 8*x^5 + 5*x^4)*y + x^5;
*/
#define X35_YDEG		15
#define X35_XDEG		16
ff_t X35_p;
ff_t X35_ff_c[X35_YDEG][X35_XDEG+1];
ff_t X35_ff_mm;
int X35_min_x[X35_YDEG] = { 5, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
int X35_len_x[X35_YDEG] = { 1, 4, 7, 10, 12, 15, 17, 15, 14, 12, 11, 9, 7, 6, 3 };
int X35_c[X35_YDEG][X35_XDEG+1] = {
	{ 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 5, 8, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 10, 49, 10, 39, 3, 6, 3, 0, 0, 0, 0, 0 },
	{ 0, 0, 10, 103, 191, -54, 349, -182, 169, -43, 16, 1, 0, 0, 0, 0, 0 },
	{ 0, 5, 106, 459, 386, -114, 1269, -1030, 1056, -528, 263, -67, 15, 0, 0, 0, 0 },
	{ 1, 54, 502, 1161, 503, 254, 2486, -2444, 2879, -1817, 1102, -446, 162, -36, 6, 0, 0 },
	{ 11, 264, 1396, 1860, 745, 1186, 2983, -3050, 4119, -2789, 1839, -841, 362, -117, 35, -7, 1 },
	{55, 770, 2520, 2065, 1489, 1865, 2464, -2017, 3233, -2007, 1308, -522, 198, -44, 8, 0, 0 },
	{ 165, 1485, 3075, 1893, 2191, 1781, 1469, -397, 1270, -515, 334, -66, 18, 2, 0, 0, 0 },
	{ 330, 1975, 2576, 1764, 1876, 1401, 534, 411, 147, 78, 4, 14, 0, 0, 0, 0, 0 },
	{ 461, 1824, 1517, 1506, 913, 914, 85, 303, -17, 39, 1, 0, 0, 0, 0, 0, 0 },
	{ 456, 1144, 686, 880, 290, 359, 27, 58, 6, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 315, 460, 275, 280, 90, 55, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 145, 105, 90, 35, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 40, 10, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
};
static inline int X35_eval(ff_t f[], ff_t x)
{
	ff_t t0, xpow[X35_XDEG+1];
	register int i, j;
	
	if ( X35_p != _ff_p ) 	{ for ( i = 0 ; i < X35_YDEG ; i++ ) for ( j = X35_min_x[i] ; j < X35_min_x[i]+X35_len_x[i] ; j++ ) _ff_set_i (X35_ff_c[i][j], X35_c[i][j]); _ff_set_ui(t0,5); _ff_invert(X35_ff_mm,t0); X35_p = _ff_p; }
	// puts powers of x in reverse order for sum mults, i.e xpow[i] = x^(n-i) where n = X35_XDEG
	_ff_set_one(xpow[X35_XDEG]); _ff_set(xpow[X35_XDEG-1],x);
	for ( i = X35_XDEG-2 ; i >= 0 ; i-- ) _ff_mult(xpow[i],xpow[i+1],x);
	for ( i = 0 ; i < X35_YDEG ; i++ ) _ff_sum_mults(f[i],X35_ff_c[i]+X35_min_x[i],xpow+X35_XDEG-X35_min_x[i]-X35_len_x[i]+1,X35_len_x[i]);
	for ( i = 0 ; i < X35_YDEG ; i++ ) ff_mult(f[i], f[i], X35_ff_mm);
	_ff_set_one(f[X35_YDEG]);
	return X35_YDEG;
}

/*
X36:=y^11 + (3*x^3 + 5*x^2 + 7*x - 4)*y^10 + (3*x^6 + 12*x^5 + 22*x^4 + 18*x^3 + 7*x^2 - 28*x + 6)*y^9
		   + (x^9 + 9*x^8 + 25*x^7 + 30*x^6 + 26*x^5 + 16*x^4 - 32*x^3 - 73*x^2 + 42*x - 4)*y^8
		   + (2*x^11 + 10*x^10 + 18*x^9 + 2*x^8 - 20*x^7 + 27*x^6 + 22*x^5 - 129*x^4 - 82*x^3 + 127*x^2 - 28*x + 1)*y^7
		   + (x^13 + 3*x^12 - 2*x^11 - 30*x^10 - 61*x^9 + 17*x^8 + 153*x^7 - 30*x^6 - 277*x^5 + 36*x^4 + 213*x^3 - 88*x^2 + 7*x)*y^6
		   - (2*x^13 + 13*x^12 + 26*x^11 - 23*x^10 - 172*x^9 - 136*x^8 + 278*x^7 + 286*x^6 - 278*x^5 - 186*x^4 + 160*x^3 - 22*x^2)*y^5
		   + (x^13 + 14*x^12 + 60*x^11 + 79*x^10 - 119*x^9 - 345*x^8 + 5*x^7 + 395*x^6 + 16*x^5 - 176*x^4 + 40*x^3)*y^4
		   - (4*x^12 + 38*x^11 + 115*x^10 + 68*x^9 - 206*x^8 - 210*x^7 + 127*x^6 + 108*x^5 - 45*x^4)*y^3
		   + (7*x^11 + 48*x^10 + 90*x^9 - 2*x^8 - 105*x^7 - 24*x^6 + 31*x^5)*y^2
		    - (6*x^10 + 26*x^9 + 24*x^8 - 8*x^7 - 12*x^6)*y + 2*x^9 + 4*x^8 + 2*x^7;
*/
#define X36_YDEG		11
#define X36_XDEG		13
ff_t X36_p;
ff_t X36_ff_c[X36_YDEG][X36_XDEG+1];
ff_t X36_ff_mm;
int X36_min_x[X36_YDEG] = { 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0};
int X36_len_x[X36_YDEG] = { 3, 5, 7, 9, 11, 12, 13, 12, 10, 7, 4 };
int X36_c[X36_YDEG][X36_XDEG+1] = {
	{ 0, 0, 0, 0, 0, 0, 0, 2, 4, 2, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 12, 8, -24, -26, -6, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 31, -24, -105, -2, 90, 48, 7, 0, 0 },
	{ 0, 0, 0, 0, 45, -108, -127, 210, 206, -68, -115, -38, -4, 0 },
	{ 0, 0, 0, 40, -176, 16, 395, 5, -345, -119, 79, 60, 14, 1 },
	{ 0, 0, 22, -160, 186, 278, -286, -278, 136, 172, 23, -26, -13, -2 },
	{ 0, 7, -88, 213, 36, -277, -30, 153, 17, -61, -30, -2, 3, 1 },
	{ 1, -28, 127, -82, -129, 22, 27, -20, 2, 18, 10, 2, 0, 0 },
	{ -4, 42, -73, -32, 16, 26, 30, 25, 9, 1, 0, 0, 0, 0 },
	{ 6, -28, 7, 18, 22, 12, 3, 0, 0, 0, 0, 0, 0, 0 },
	{-4, 7, 5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
};
static inline int X36_eval(ff_t f[], ff_t x)
{
	ff_t xpow[X36_XDEG+1];
	register int i, j;
	
	if ( X36_p != _ff_p ) 	{ for ( i = 0 ; i < X36_YDEG ; i++ ) for ( j = X36_min_x[i] ; j < X36_min_x[i]+X36_len_x[i] ; j++ ) _ff_set_i (X36_ff_c[i][j], X36_c[i][j]); X36_p = _ff_p; }
	// puts powers of x in reverse order for sum mults, i.e xpow[i] = x^(n-i) where n = X36_XDEG
	_ff_set_one(xpow[X36_XDEG]); _ff_set(xpow[X36_XDEG-1],x);
	for ( i = X36_XDEG-2 ; i >= 0 ; i-- ) _ff_mult(xpow[i],xpow[i+1],x);
	for ( i = 0 ; i < X36_YDEG ; i++ ) _ff_sum_mults(f[i],X36_ff_c[i]+X36_min_x[i],xpow+X36_XDEG-X36_min_x[i]-X36_len_x[i]+1,X36_len_x[i]);
	_ff_set_one(f[X36_YDEG]);
//printf ("X36(%ld,x) = ", _ff_get_ui(x));  ff_poly_print(f,X36_YDEG);
	return X36_YDEG;
}

#endif
